{"version":3,"sources":["constants/config.js","reducers/index.js","containers/search-sort.js","actions/index.js","containers/tile.js","containers/tiles.js","App.js","routes/index.js","serviceWorker.js","index.js","middleware/async.js"],"names":["TILES_LOADED","SEARCH_TERM_CHANGED","combineReducers","tiles","state","action","type","payload","searchTerm","SearchSort","props","handleChange","e","setState","term","target","value","searchTermChanged","className","style","margin","this","placeholder","onChange","React","Component","mapDispatchToProps","connect","Tile","tile","Card","CardHeader","title","name","subtitle","url","avatar","Avatar","aria-label","owner","login","backgroundColor","red","substring","termRegex","RegExp","_filter","repo","test","map","key","id","App","tilesLoaded","height","marginTop","display","position","bottom","right","left","padding","axios","get","Routes","path","component","Boolean","window","location","hostname","match","createdStore","applyMiddleware","dispatch","next","then","response","newAction","_assign","data","createStore","reducers","ReactDOM","render","store","children","routes","history","createBrowserHistory","document","querySelector","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6dc47de3.chunk.js","sourcesContent":["export const TILES_LOADED = 'TILES_LOADED';\nexport const SEARCH_TERM_CHANGED = 'SEARCH_TERM_CHANGED';\nexport const GH_API = 'https://api.github.com/users/vish1988/repos';\n","import { combineReducers } from 'redux';\nimport { SEARCH_TERM_CHANGED, TILES_LOADED } from '../constants/config';\n\nexport default combineReducers({\n  tiles: tilesReducer,\n  searchTerm: filteredTilesReducer,\n});\n\nfunction tilesReducer(state = null, action) {\n  if (action.type === TILES_LOADED) {\n    return action.payload;\n  } else {\n    return state;\n  }\n}\n\nfunction filteredTilesReducer(state = null, action) {\n  if (action.type === SEARCH_TERM_CHANGED) {\n    return action.payload;\n  } else {\n    return state;\n  }\n}\n\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { searchTermChanged } from '../actions';\n\nclass SearchSort extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { term: '' };\n  }\n  \n  handleChange = (e) => {\n    this.setState({ term: e.target.value });\n    return this.props.searchTermChanged(e.target.value);\n  };\n  \n  render() {\n    return (\n      <div className=\"col-xs-12 input-group\" style={{ margin: '10px' }}>\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          value={this.state.term}\n          placeholder=\"Search the repositories\"\n          onChange={this.handleChange}\n        />\n      </div>);\n  }\n}\n\nconst mapDispatchToProps = { searchTermChanged };\n\nexport default connect(null, mapDispatchToProps)(SearchSort);\n","import axios from 'axios';\nimport { GH_API, SEARCH_TERM_CHANGED, TILES_LOADED } from '../constants/config';\n\nexport const tilesLoaded = () => ({\n  type: TILES_LOADED,\n  payload: axios.get(GH_API),\n});\n\nexport const searchTermChanged = (term) => ({\n  type: SEARCH_TERM_CHANGED,\n  payload: term,\n});\n","import { Avatar, Card, CardHeader } from '@material-ui/core';\nimport { red } from '@material-ui/core/colors';\nimport React from 'react';\n\nconst Tile = ({ tile }) => {\n  return (<Card className=\"col-xs-4\">\n    <CardHeader\n      title={tile.name}\n      subtitle={tile.url}\n      avatar={\n        <Avatar aria-label={tile.owner.login}\n                style={{ backgroundColor: red['500'] }}>\n          {tile.owner.login.substring(0, 1)}\n        </Avatar>\n      }\n      style={{\n        backgroundColor: red['2'],\n      }}\n    />\n  </Card>);\n};\n\nexport default Tile;\n","import _filter from 'lodash/filter';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Tile from './tile';\n\nconst Tiles = ({ tiles }) => (<div className=\"row\">\n  {tiles ? tiles.map(tile => (<Tile key={tile.id} tile={tile}/>)) : 'Loading ...'}\n</div>);\n\nfunction mapStateToProps(state) {\n  let tiles;\n  if (state.searchTerm) {\n    const termRegex = new RegExp(state.searchTerm, 'gi');\n    tiles = _filter(state.tiles, (repo) => termRegex.test(repo.name));\n  } else {\n    return { tiles: state.tiles, term: state.searchTerm };\n  }\n  return { tiles: tiles, term: state.searchTerm };\n}\n\nexport default connect(mapStateToProps)(Tiles);\n","import React from 'react'\nimport SearchSort from './containers/search-sort'\nimport Tiles from './containers/tiles'\nimport { connect } from 'react-redux'\nimport { tilesLoaded } from './actions'\n\nclass App extends React.Component {\n  componentWillMount() {\n    this.props.tilesLoaded()\n  }\n\n  render() {\n    return (\n      <section className='container'>\n        <header className='header'\n          style={{ height: '50px', backgroundColor: '#443266' }} />\n        <article className=\"row\" style={{ marginTop: 60 }}>\n          <SearchSort />\n          <section className=\"col-xs-12\" style={{ margin: '10px' }}>\n            <Tiles />\n          </section>\n        </article>\n        <footer className='row' style={{\n          display: 'flex',\n          backgroundColor: '#8C489F',\n          position: 'fixed',\n          bottom: 0,\n          right: 0,\n          left: 0,\n          height: '45px',\n          padding: '10px',\n        }}>\n          <span className=\"col-xs-6\">Visweshwaranâ„¢</span>\n        </footer>\n      </section>\n    )\n  }\n}\n\nconst mapDispatchToProps = {\n  tilesLoaded,\n}\n\nexport default connect(null, mapDispatchToProps)(App)","import React from 'react';\nimport { Route } from 'react-router';\nimport App from '../App';\n\nconst Routes = <Route path=\"/\" component={App}/>;\n\nexport default Routes;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createBrowserHistory } from 'history';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { Router } from 'react-router';\nimport { applyMiddleware, createStore } from 'redux';\nimport './index.css';\nimport Async from './middleware/async';\nimport reducers from './reducers';\nimport routes from './routes';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst createdStore = applyMiddleware(Async)(createStore)(reducers);\n\nReactDOM.render(<Provider store={createdStore}>\n  <Router children={routes} history={createBrowserHistory()}/>\n</Provider>, document.querySelector('.root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import _assign from 'lodash/assign';\n\nexport default ({ dispatch }) => next => action => {\n  //no promise to resolve\n  if (!action.payload || !action.payload.then) {\n    return next(action);\n  }\n  //promise resolved\n  action.payload.then(response => {\n    //const payload = _.assign({term: ''}, {repo: response.data});\n    const newAction = _assign(action, { payload: response.data });\n    return dispatch(newAction);\n  });\n}\n"],"sourceRoot":""}